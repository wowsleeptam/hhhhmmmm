1) ооп основано на наследовании, инкапсуляции и абстракции. Наследование - создание новых 
объектов путем непосредственного сохранения свойств и поведения при последующем расширении или 
конкретизации. Инкапсуляция - процесс скрытого хранения деталей реализации объекта от пользователя
Абстракция - разделение интерфейса и реализации

2) При проектировании класса следует учитывать следующие вещи. Инициализировать данные в классе мы можем
в конструкторах с использованием списка инициализации или обычного присовения. Если в конструкторе 
мы вручную выделили память, то нужно ее удалить. Удаление данных происходит в деструкторе, который вызывает при удалении переменной.
Также мы можешь прописать фукнции-члены в классе или же предаставить данные другой фукнции через
ключевое слово friend

3) Разделение интерфейса и реализации позволяет использовать объекты без необходимости их
понимания их реализации. Можно представить себе машину. Интерфейс представим в виде руля, кнопок и так далее
А реализация - это представление о том, как работает двс, как машина тормазит. В данном случае
обычному пользователю не нужно понимать реализацию. Ему нужен только интерфейс, чтобы пользоваться программой

4) Внешнее связывание связывает несколько единиц единиц трансляций, т.е. данные будут доступны
другим файлам. Во внутреннем связывании данные видны только внутри одной единицы трансляции

5) Особенность пространства имен используется в тех случаях, когда при возникновении коллизий (конфликта имен)
программа смогла различить, например, название идентификатора и инлетификатора из стандартной библеотки.  